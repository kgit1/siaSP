<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- Add support for component scanning -->
	<!-- The context:component-scan element defines the base-package where DispatcherServlet 
		will search the controller class. -->
	<context:component-scan base-package="com.k1.spitter" />

	<!-- Add support for conversion, formatting and validation support -->
	<mvc:annotation-driven />

	<!-- Define Spring MVC view resolver -->
<!-- 	<bean -->
<!-- 		class="org.springframework.web.servlet.view.InternalResourceViewResolver"> -->
<!-- 		<property name="prefix" value="/WEB-INF/view/" /> -->
<!-- 		<property name="suffix" value=".jsp" /> -->
<!-- 	</bean> -->

	<!-- Step 1: Define Database DataSource / connection pool -->
	<!-- dataSource MySql connection -->
	<!-- we use dbcp BasicDataSource because it provides ability to use pool 
		of connections(c3p0 popular to) anlike as DriverManagerDataSource which just 
		create new connection every transaction -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost:3306/spitter?zeroDateTimeBehavior=convertToNull" />
		<property name="username" value="root" />
		<property name="password" value="123456" />
	</bean>

	<!-- Step 2: Setup Hibernate session factory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- dataSource - connection to database -->
		<property name="dataSource" ref="dataSource" />
		<!-- when all annotated classes would be searched in one package we can 
			not point each class, but just show package to scan -->
		<property name="packagesToScan" value="com.k1.spitter" />
		<property name="hibernateProperties">
			<props>
				<!-- tells hibernate which dialect use to talk with database -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<!-- tells hibernate to show sql queries -->
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>

	<!-- Step 3: Setup Hibernate transaction manager -->
	<!-- transactions for Hibernate -->
	<!-- transactionManager default name for transaction managers, can be changed 
		if required, but better not -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<!-- give session factory which will be wrapped by our transaction manager 
			to property "sessionFactory" -->
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- Step 4: Enable configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- Step 6: Mark location for all supporting resources like css and images -->
	<mvc:resources location="/resources/" mapping="/resources/**"></mvc:resources>

	<!-- Step 6: Setup tiles -->
	<!-- <bean id="viewResolver" -->
	<!-- class="org.springframework.web.servlet.view.UrlBasedViewResolver"> -->
	<!-- <property name="prefix" value="/WEB-INF/view/" /> -->
	<!-- <property name="suffix" value=".jsp" /> -->
	<!-- <property name="viewClass"> -->
	<!-- <value> -->
	<!-- org.springframework.web.servlet.view.tiles3.TilesView -->
	<!-- </value> -->
	<!-- </property> -->
	<!-- </bean> -->

	<!-- Tiles configuration -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.tiles3.TilesViewResolver" />

	<bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tiles.xml</value>
			</list>
		</property>
	</bean>

	<!-- id="tilesViewResolver" -->

	<!-- <bean id="viewResolver" -->
	<!-- class="org.springframework.web.servlet.view.UrlBasedViewResolver"> -->
	<!-- <property name="viewClass"> -->
	<!-- <value>org.springframework.web.servlet.view.tiles3.TilesView</value> -->
	<!-- </property> -->
	<!-- <property name="prefix" value="/WEB-INF/view/" /> -->
	<!-- <property name="suffix" value=".jsp" /> -->
	<!-- </bean> -->




</beans>





